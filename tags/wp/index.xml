<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>wp - Tag - Sc0fie1d</title>
        <link>http://scofield1920.github.io/tags/wp/</link>
        <description>wp - Tag - Sc0fie1d</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="http://scofield1920.github.io/tags/wp/" rel="self" type="application/rss+xml" /><item>
    <title>ctfhub_信息泄露wp</title>
    <link>http://scofield1920.github.io/ctfhub--info_leakage/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofield_lee</name>
    </author><guid>http://scofield1920.github.io/ctfhub--info_leakage/</guid>
    <description><![CDATA[【目录遍历】emm挨着找吧
【PHPINFO】ctrl+f，搜索flag
【备份文件下载】（网站源码） 1 python dirsearch.py -u http://challenge-386c567a8c9e211f.sandbox.ctfhub.com:10800/ -e * （ bak文件）bak文件是备份文件，一般在原有的扩展名后添加.bak，提示说flag在index.php源码中，但我们直接在网址后添加php文件名查找时发现并未找到该文件
（vim缓存）当正常关闭vim时，缓存文件会被删除，但当vim异常退出时，缓存文件是未被删除的，我们就可以通过恢复未被处理缓存文件来获取原始文件的内容。第一次非正常退出vim时会生成一个swp文件，第二次非正常退出会生成一个swp文件，第三次非正常退出会生成一个swp文件。因此我们可以通过访问.index.php.swp来得到缓存文件
1 使用vim -r index.php.swp命令来恢复原文件 (.DS_Store)直接在网址后添加.DS_Store得到文件
使用cat DS_Store命令来查看文件，发现了一个txt文件
把这个文件复制下来添加到地址后得到flag
【Git泄露】（log）利用GitHacker工具
1 githacker --url http://xxxxx/.git/ --output-folder result 然后进入目录进行：
git log
1 git diff 3e25d 或者 git diff HEAD^ （stash） git 泄露 .git/refs/stash stash 用于保存 git 工作状态到 git 栈，在需要的时候再恢复。 先进行githacker，然后git stash list发现有stash
执行git stash apply或者git stash pop
（index）直接githacker扒目录
【svn泄露】使用dvcs-ripper工具
1 ./rip-svn.pl -u http://challenge-4c86874278e5cd1d.sandbox.ctfhub.com:10800/.svn 然后进入工具目录下的.svn文件夹
1 cat wc.]]></description>
</item><item>
    <title>SkyNICO2022.11三校联赛</title>
    <link>http://scofield1920.github.io/skynico2022.11/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>scofield_lee</name>
    </author><guid>http://scofield1920.github.io/skynico2022.11/</guid>
    <description><![CDATA[【Misc福利题】sign sign sign签到题不必多说了，扫描二维码复制字符串，放进[随波逐流]一键base 但一定要注意，要把字符串复制全，别漏了末尾的等号(可能三个)
[Misc]幸亏开着wiresharktips:Wanna有个HID键盘和Cisco交换机 下载附件之后，解压发现有个txt后缀的文件和png文件，都显然不是既定后缀文件，放进010edits，查看文件头和ASCII转码显示的字符，发现那个那个所谓的txt文件是一个7z压缩包，而那个png文件
其实题目名称已经有暗示了，直接拖进wireshark
同时我也对该题进行了百度，数据协议:USB，是抓取的键盘流量，下载相关脚本，但怎么也跑不出来，经过了许久地反复横跳，我发现了问题所在，本次题目文件中有些许冗杂的数据，阻碍了脚本的运行
删掉他们重新导出pcapng数据，只保留一下信息
重新跑脚本，得到了压缩包密码：where is you 解压后得到了一个文本文件，系Cisco交换机配置文件
好骚的题，复制那堆emoji表情进行解码，得到hint，解码password7可得flag 随后去搜索，Cisco交换机加密方式，
看到了7！一眼丁真，在线网站直接解密
【Misc福利题】啊吧啊吧也算是签到题吧，发送到foremost进行分解，然后OCR提取flag，同时遇到了一个问题，flag死活不对，原因系相似字符混淆注意。一定要注意形似字符区分(好丢nian)
lI| lI|
不同字体会有不一样的显示
[Misc]Pixels In Picture放大仔细看，有隐写的像素点，就叫他像素点隐写吧，也没啥太好的办法，拉进ps或者lr，
我的办法是，能直接读的就读，看不清就拉参数，结合lr和Stegsolve多生成几张对比着看
愣看，不知道师傅们有什么更好的方法。
[Misc]希尔伯特的微笑当你跳跃维度，希尔伯特在向你微笑，从alpha的角度看去，在希尔伯特曲线中领悟真谛，上下颠倒，在Quine中，发现隐藏在空白之下的秘密
真不好意思，这个题被我做成社工题了，
摘自：https://www.anquanke.com/post/id/244533
题目描述：“三体人要入侵地球了，听说他们要使出最厉害的武器”
打开图片，发现有三个重复的图形，下面有”DIFOIL”字样，再下面好像还有一串字，但看不清楚。
图片看起来很奇怪，三个图形也呼应了“ThreeBody”的题目名称。
对于图片题目常规操作，使用StegSolve查看各图层，能发现两张隐藏的图片，其他图层再没有什么可疑的东西了：
图片上能认出半个星球、一个宇航员、一只手，以及《三体》中经典的一句话“你们都是虫子”。
对三体比较熟悉的同学可能可以猜出这张图以及原始图片是三体人使用二向箔对地球进行降维打击的场景。
这里也是小小地调侃了一下选手。如果不能找到通往下一步的方法，便只能停留在这里，被三体人嘲讽为“虫子”。
让我们再回到原始图片，放大看其中的细节：
可见图片中红黄蓝绿交错，有老式电视像素点的感觉。
通过010Editor查看像素点数值：
可见相邻像素点的RGB值都差异巨大，正常情况下相邻像素点的RGB值应该差不多才对。
再仔细观察可以发现，如果以4为周期的话相邻像素的数值就差不多了，考虑正常情况下该图片的像素点应该是每4个一组。相当于原始图片是四维的，这里被“降维打击”成了三维。我们这里需要做的，便是对图片进行升维处理。
BMP格式的头部有个字节是控制每个像素点所占的比特数，现在为24，也就是3个字节，我们将这个字段改为4个字节对应的32：
biBitCount
保存后重新打开图片，便可以看到正常的图形了：
再次通过StegSolve进行查看，可以发现隐藏图片：
很多人看到“Welcome to QWB”可能就放松了警惕，以为这是一张随便放的没啥用的图片，便去找其他线索了。在CTF题目中忽视作者所给的线索是大忌，其实这里是非常关键的，所以在比赛过程中我有提示“所有图片的内容都是有意义的”。
其实细心的话可以看到左上角有一些小白点，代表着那里隐藏着一些信息。使用StegSolve的Data Extract功能查看该空间：
可以看到有“Who am I?”的字样。
再以列为方式查看：
可以看到有“David”字样。
根据这张照片和“David”的提示，通过一番搜索可得知这一位是知名的数学家大卫·希尔伯特：
不过除此之外我们得不到更多的信息了。Flag在哪呢？
让我们再用010Editor查看修改后的图片：
可以看到每个像素除了有RGB三个字段外还有一个字段，代表图片还有另一个通道。
rgbReserved
这个字段有些跟是一样的，但也有一些有细微差异。
rgbBlue
信息会不会就隐藏在字段呢？
rgbReserved
字段是有数值的，所以该通道肯定有对应的图形，不过刚才通过StegSolve并没有看到该通道。
rgbReserved
这里一个方法是修改BMP的文件头，使得StegSolve把该通道识别为Alpha通道。
不过这个可能需要了解一些BMP头相关的知识。这里采用一个更为暴力的方法，通过一个Python脚本解析BMP文件结构，把的数值复制给：
rgbReserved
rgbBlue]]></description>
</item></channel>
</rss>
