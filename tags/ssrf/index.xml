<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>SSRF - Tag - Sc0fie1d-Blog</title>
        <link>http://scofield1920.github.io/tags/ssrf/</link>
        <description>SSRF - Tag - Sc0fie1d-Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="http://scofield1920.github.io/tags/ssrf/" rel="self" type="application/rss+xml" /><item>
    <title>SSRF</title>
    <link>http://scofield1920.github.io/ssrf/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate><author>
        <name>Author</name>
    </author><guid>http://scofield1920.github.io/ssrf/</guid>
    <description><![CDATA[0.1 0x1 概述SSRF(Server-Side Request Forgery，服务器端请求伪造) 是一种由攻击者构造请求，由服务端发起请求的一个安全漏洞。一般情况下，SSRF 攻击的目标是从外网无法访问的内部系统，因为服务器请求天然的可以穿越防火墙。漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作正确的过滤和限制。
0.2 0x2 原理**SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。**比如从指定URL地址获取网页文本内容，加载指定地址的图片，文档等等。SSRF漏洞通过篡改获取资源的请求发送给服务器（服务器并没有检测这个请求是否合法的），然后服务器以他的身份来访问服务器的其他资源。SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。
0.3 0x3 函数和伪协议PHP中下面函数的使用不当会导致SSRF:
file_get_contents() fsockopen() curl_exec()
伪协议
file://：从文件系统中获取文件内容，如，file:///etc/passwd dict://：字典服务器协议，访问字典资源，如，dict:///ip:6739/info gopher://：分布式文档传递服务，可使用gopherus生成payload。
0.4 0x4 SSRF怎么找能够对外发起网络请求的地方，就可能存在SSRF漏洞。
能够对外发起网络请求的地方 请求远程服务器资源的地方 数据库内置功能 邮件系统 文件处理 在线处理工具 0.5 0x5 ssrf漏洞利用0.5.1 1任意文件读取file:// 通过file协议读取本地文件，但只能读取已知文件名的文件
0.5.2 2内网资源探测利用控制的host字段，来扫描内网存活主机 若服务器监听127.0.0.1则这个端口只能被本机访问，若监听0.0.0.0，则这个端口可以被外网访问
0.5.3 3gopher协议扩展攻击面gopher:// 负责转发
0.5.3.1 1攻击redis的6379端口Redis一般运行在内网，使用者大多将其绑定在127.0.0.1:6379地址，切且一般为空口令，攻击者可以通过SSRF访问内网的redis，由于redis支持通过url形式的访问，来增加、删除、保存内容，所以，攻击者就可以首先增加一个PHP一句话木马的内容到redis，然后备份其文件，就可以将一句话木马保存到硬盘中，实现恶意代码写入
rides是一条指令执行一个行为，如果其中一条指令是错的，会继续读取下一条指令继续执行，所以如果我们能够控制报文的任意一行，就可以将其修改为redis指令，分批执行命令完成攻击
0.5.3.2 2攻击MySQL的3306端口攻击内网中的MySQL，我们需要了解其通信协议，MySQL分为服务端和客户端
由客户端连接服务端有四种方式：
1.Unix套接字 2.内存共享 3.命名管道 4.TCP/IP套接字
我们的攻击依靠第四种方式，MySQL客户端连接时： 1.需要密码认证，此时，服务器先发送salt，客户端使用salt进行加密后再验证 2.不需要密码验证，将直接使用上面第四种方式发送数据包
所以，这里攻击MySQL，需要在非交互条件下进行，一定只能攻击没有密码的MySQL服务器
0.5.3.3 3攻击fastcgi的9000端口 php-fpm是个中间件，在需要PHP解释器来处理php文本时会用到php-fpm.自从PHP5.3以后将php-fpm继承到php内核中，php-fpm提供了更好的php进程管理方式，可以有效控制内存的进程，可以平滑重载php配置
以我们经常执行访问的index.php?file=/etc/passwd为例:
浏览器发送访问index.php的请求到web服务器,比如nginx/apache web服务器将请求的url(index.php),参数(file=/etc/passwd)等等发送给专门的php解释器来执行,因为nginx/apache是只能处理静态文件(通过文件读取的方式) , 对于动态的php脚本, 需要专门的php-fpm中间件来解释执行 php-fpm收到了web服务器传递过来的各种参数后, 初始化zend虚拟机, 对php文件做词法分析,语法分析,编译成opcode,并执行.最后关闭zend虚拟机.将执行结果返回给web服务器 web服务器收到返回结果后,将http相应传给浏览器 包含配置文件以后，后面紧跟一句]]></description>
</item></channel>
</rss>
